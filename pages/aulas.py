import streamlit as st
import os
import pandas as pd 
import re
from openai import OpenAI

st.set_page_config(
    page_title="Material de Aula MAT020",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded")

 
def st_markdown(markdown_string):
    parts = re.split(r"!\[(.*?)\]\((.*?)\)", markdown_string)
    for i, part in enumerate(parts):
        if i % 3 == 0:
            st.markdown(part)
        elif i % 3 == 1:
            title = part
        else:
            st.image(part)  # Add caption if you want -> , caption=title)


# Fun√ß√£o para buscar arquivos markdown no diret√≥rio de aulas
def buscar_aulas(diretorio):
    return [f for f in os.listdir(diretorio) if f.endswith('.txt')]

# Fun√ß√£o para ler o conte√∫do de uma aula em markdown
def ler_aula(arquivo):
    with open(arquivo, 'r', encoding='utf-8') as f:
        return f.read()

# Diret√≥rio onde as aulas est√£o armazenadas
diretorio_aulas = 'aulas' 

# Busca as aulas no diret√≥rio
aulas = buscar_aulas(diretorio_aulas)

# Widget de sele√ß√£o de aula
aula_selecionada = st.sidebar.selectbox('Selecione uma aula:', aulas)
 
caminho_aula = os.path.join(diretorio_aulas, aula_selecionada)
conteudo_aula = ler_aula(caminho_aula)
st_markdown(conteudo_aula)
 

abas = ['Resumo AI', 'Lista de Insights AI', 'Exerc√≠cios AI']

aba1, aba2, aba3 = st.tabs(abas)

with aba1:
    st.header(abas[0]) 
with aba2:
    st.header(abas[1]) 
with aba3:
    st.header(abas[2])  


# Configura√ß√µes de API 
openai_api_key = st.secrets["OPENAI_API_KEY"]
client = OpenAI(api_key=openai_api_key)

 
# Configura√ß√µes de modelo e carregamento de instru√ß√µes do assistente
modelo = 'gpt-4o-mini'
 

# Mensagem inicial do assistente no chat
prompt = f"""
Voc√™ √© um assistente de professor cuja tarefa √© escrever exercicios baseado no <material de aula>.
O exercicio deve ser um teste, com 4 alternativas de resposta, da qual apenas uma seja correta. 
Voc√™ deve elaborar 5 exerc√≠cios e apresent√°-los sequencialmente. Os exerc√≠cios devem abranger todo o conte√∫do do <material de aula>
O teste deve ter um nivel de dificuldade m√©dio para desafiador.
No seu output, deve contar apenas o exerc√≠cio, nada a mais, nada a menos. 
Use formata√ß√£o para destacar o que for importante e emojis quando pertinente (nao exagere).
N√£o apresente a resposta correta. 
Seja objetivo e preciso na escrita do exerc√≠cio. Varie Bastante as ideias tamb√©m. 
Use um par√¢metro de temperatura alto.

<material de aula>
{conteudo_aula}
</material de aula>
 """ 

if st.button('Gerar Exerc√≠cio AI'): 
    # Faz uma requisi√ß√£o √† API OpenAI para gerar a resposta do assistente
    with st.chat_message("assistant"):
        stream = client.chat.completions.create(
            model=modelo,
            messages= [{"role": "user", "content": prompt}],
            stream=True
        )

        # Exibe a resposta em tempo real
        response = st.write_stream(stream)
